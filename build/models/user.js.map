{"version":3,"sources":["../../src/models/user.js"],"names":["userSchema","mongoose","Schema","username","type","String","required","unique","password","venmo","role","player","Types","ObjectId","ref","statics","findByLogin","findOne","user","methods","validatePassword","console","log","bcrypt","compare","pre","next","model","deleteOne","_id","User"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;AAEA,IAAMA,UAAU,GAAG,IAAIC,qBAASC,MAAb,CAAoB;AACnCC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,IAAI,EAAEC,MADA;AAENC,IAAAA,QAAQ,EAAE,IAFJ;AAGNC,IAAAA,MAAM,EAAE;AAHF,GADyB;AAMnCC,EAAAA,QAAQ,EAAE;AACNJ,IAAAA,IAAI,EAAEC,MADA;AAENC,IAAAA,QAAQ,EAAE,IAFJ;AAGNC,IAAAA,MAAM,EAAE;AAHF,GANyB;AAWnCE,EAAAA,KAAK,EAAE;AACHL,IAAAA,IAAI,EAAEC;AADH,GAX4B;AAcnCK,EAAAA,IAAI,EAAE;AACFN,IAAAA,IAAI,EAAEC;AADJ,GAd6B;AAiBnCM,EAAAA,MAAM,EAAE;AAAEP,IAAAA,IAAI,EAAEH,qBAASC,MAAT,CAAgBU,KAAhB,CAAsBC,QAA9B;AAAwCC,IAAAA,GAAG,EAAE;AAA7C;AAjB2B,CAApB,CAAnB;;AAoBAd,UAAU,CAACe,OAAX,CAAmBC,WAAnB;AAAA,qEAAiC,iBAAgBb,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACZ,KAAKc,OAAL,CAAa;AAC1Bd,cAAAA,QAAQ,EAAEA;AADgB,aAAb,CADY;;AAAA;AACzBe,YAAAA,IADyB;AAAA,6CAKtBA,IALsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjC;;AAAA;AAAA;AAAA;AAAA;;AAQAlB,UAAU,CAACmB,OAAX,CAAmBC,gBAAnB;AAAA,sEAAsC,kBAAeZ,QAAf;AAAA;AAAA;AAAA;AAAA;AAClCa,YAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AADkC;AAAA,mBAErBC,mBAAOC,OAAP,CAAehB,QAAf,EAAyB,KAAKA,QAA9B,CAFqB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtC;;AAAA;AAAA;AAAA;AAAA,I,CAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAEAR,UAAU,CAACyB,GAAX,CAAe,QAAf,EAAyB,UAASC,IAAT,EAAe;AACpC,OAAKC,KAAL,CAAW,QAAX,EAAqBC,SAArB,CAA+B;AAAEV,IAAAA,IAAI,EAAE,KAAKW;AAAb,GAA/B,EAAmDH,IAAnD;AACH,CAFD;;AAIA,IAAMI,IAAI,GAAG7B,qBAAS0B,KAAT,CAAe,MAAf,EAAuB3B,UAAvB,CAAb;;eACe8B,I","sourcesContent":["import mongoose from 'mongoose';\nimport bcrypt from 'bcrypt';\n\nconst userSchema = new mongoose.Schema({\n    username: {\n        type: String,\n        required: true,\n        unique: true,\n    },\n    password: {\n        type: String,\n        required: true,\n        unique: true,\n    },\n    venmo: {\n        type: String,\n    },\n    role: {\n        type: String\n    },\n    player: { type: mongoose.Schema.Types.ObjectId, ref: 'Player' },\n});\n\nuserSchema.statics.findByLogin = async function (username) {\n    let user = await this.findOne({\n        username: username,\n    });\n\n    return user;\n};\n\nuserSchema.methods.validatePassword = async function(password) {\n    console.log('this.password');\n    return await bcrypt.compare(password, this.password);\n};\n\n// userSchema.methods.generatePasswordHash = async function (password) {\n//     const saltRounds = 10;\n//     return await bcrypt.hash(password, saltRounds);\n// };\n\n// userSchema.pre('save', async user => {\n//     if (user.username === 'jmay' || user.username === 'ananduri'){\n//         this.role = 'ADMIN';\n//     }\n// });\n\nuserSchema.pre('remove', function(next) {\n    this.model('Player').deleteOne({ user: this._id }, next);\n});\n\nconst User = mongoose.model('User', userSchema);\nexport default User;"],"file":"user.js"}