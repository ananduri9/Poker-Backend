{"version":3,"sources":["../src/index.js"],"names":["app","use","getMe","req","token","headers","authorization","jwt","verify","process","env","SECRET","AuthenticationError","server","ApolloServer","typeDefs","schema","resolvers","context","connection","models","me","secret","applyMiddleware","path","httpServer","http","createServer","installSubscriptionHandlers","eraseDatabaseOnSync","port","PORT","then","Promise","all","User","deleteMany","Player","Game","listen","console","log"],"mappings":";;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;;;;;AAGA,IAAMA,GAAG,GAAG,0BAAZ;AAEAA,GAAG,CAACC,GAAJ,CAAQ,uBAAR;;AAEA,IAAMC,KAAK;AAAA,qEAAG,iBAAMC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACJC,YAAAA,KADI,GACID,GAAG,CAACE,OAAJ,CAAYC,aADhB;;AAAA,iBAGNF,KAHM;AAAA;AAAA;AAAA;;AAAA;AAAA,6CAKKG,yBAAIC,MAAJ,CAAWJ,KAAX,EAAkBK,OAAO,CAACC,GAAR,CAAYC,MAA9B,CALL;;AAAA;AAAA;AAAA;AAAA,kBAOI,IAAIC,wCAAJ,CACF,sCADE,CAPJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAALV,KAAK;AAAA;AAAA;AAAA,GAAX;;AAcA,IAAMW,MAAM,GAAG,IAAIC,iCAAJ,CAAiB;AAC5BC,EAAAA,QAAQ,EAAEC,kBADkB;AAE5BC,EAAAA,SAAS,EAATA,qBAF4B;AAG5BC,EAAAA,OAAO;AAAA,4EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAASf,cAAAA,GAAT,SAASA,GAAT,EAAcgB,UAAd,SAAcA,UAAd;;AAAA,mBACDA,UADC;AAAA;AAAA;AAAA;;AAAA,gDAEM;AACHC,gBAAAA,MAAM,EAANA;AADG,eAFN;;AAAA;AAAA,mBAODjB,GAPC;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAQgBD,KAAK,CAACC,GAAD,CARrB;;AAAA;AAQKkB,cAAAA,EARL;AAAA,gDASM;AACHD,gBAAAA,MAAM,EAANA,kBADG;AAEHC,gBAAAA,EAAE,EAAFA,EAFG;AAGHC,gBAAAA,MAAM,EAAEb,OAAO,CAACC,GAAR,CAAYC;AAHjB,eATN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAHqB,CAAjB,CAAf;AAqBAE,MAAM,CAACU,eAAP,CAAuB;AAAEvB,EAAAA,GAAG,EAAHA,GAAF;AAAOwB,EAAAA,IAAI,EAAE;AAAb,CAAvB;;AAEA,IAAMC,UAAU,GAAGC,iBAAKC,YAAL,CAAkB3B,GAAlB,CAAnB;;AACAa,MAAM,CAACe,2BAAP,CAAmCH,UAAnC;AAEA,IAAMI,mBAAmB,GAAG,KAA5B;AAEA,IAAMC,IAAI,GAAGrB,OAAO,CAACC,GAAR,CAAYqB,IAAZ,IAAoB,IAAjC;AAEA,yBAAYC,IAAZ,uEAAiB;AAAA;AAAA;AAAA;AAAA;AAAA,eACTH,mBADS;AAAA;AAAA;AAAA;;AAAA;AAAA,iBAEHI,OAAO,CAACC,GAAR,CAAY,CACdd,mBAAOe,IAAP,CAAYC,UAAZ,CAAuB,EAAvB,CADc,EAEdhB,mBAAOiB,MAAP,CAAcD,UAAd,CAAyB,EAAzB,CAFc,EAGdhB,mBAAOkB,IAAP,CAAYF,UAAZ,CAAuB,EAAvB,CAHc,CAAZ,CAFG;;AAAA;AASbX,UAAAA,UAAU,CAACc,MAAX,CAAkB;AAAET,YAAAA,IAAI,EAAJA;AAAF,WAAlB,EAA4B,YAAM;AAC9BU,YAAAA,OAAO,CAACC,GAAR,6CAAiDX,IAAjD;AACH,WAFD;;AATa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB","sourcesContent":["import \"core-js/stable\";\nimport \"regenerator-runtime/runtime\";\nimport 'dotenv/config';\nimport cors from 'cors';\nimport jwt from 'jsonwebtoken';\nimport http from 'http';\nimport express from 'express';\nimport { ApolloServer, AuthenticationError } from 'apollo-server-express';\n\nimport schema from './schema';\nimport resolvers from './resolvers';\nimport models, { connectDb } from './models';\n\n\nconst app = express();\n\napp.use(cors());\n\nconst getMe = async req => {\n    const token = req.headers.authorization;\n\n    if (token) {\n        try {\n            return jwt.verify(token, process.env.SECRET);\n        } catch (e) {\n            throw new AuthenticationError(\n                'Your session expired. Sign in again.',\n            );\n        }\n    }\n};\n\nconst server = new ApolloServer({\n    typeDefs: schema,\n    resolvers,\n    context: async ({ req, connection }) => {\n        if (connection) {\n            return {\n                models,\n            };\n        }\n        \n        if (req) {\n            const me = await getMe(req);\n            return {\n                models,\n                me,\n                secret: process.env.SECRET,\n            };\n        }\n    },\n});\n\nserver.applyMiddleware({ app, path: '/graphql' });\n\nconst httpServer = http.createServer(app);\nserver.installSubscriptionHandlers(httpServer);\n\nconst eraseDatabaseOnSync = false;\n\nconst port = process.env.PORT || 8000;\n\nconnectDb().then(async () => {\n    if (eraseDatabaseOnSync) {\n        await Promise.all([\n            models.User.deleteMany({}),\n            models.Player.deleteMany({}),\n            models.Game.deleteMany({}),\n        ]);\n    }\n\n    httpServer.listen({ port }, () => {\n        console.log(`Apollo Server on http://localhost:${port}/graphql`);\n    });\n});\n"],"file":"index.js"}