{"version":3,"sources":["../../src/resolvers/player.js"],"names":["Query","player","parent","position","gameId","models","Player","findOne","game","UserInputError","players","args","find","Mutation","createPlayer","stack","me","Game","_id","User","id","user","admin","numPlayers","hand","betAmount","standing","requestStanding","requestSitting","push","save","console","error","pubsub","publish","EVENTS","PLAYER","CREATED","change","updateStack","removePlayer","sit","stand","ServerError"],"mappings":"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","sourcesContent":["import { UserInputError } from 'apollo-server-express';\n\nimport pubsub, { EVENTS } from '../subscription';\nimport { removePlayer } from '../helpers/functions';\n\nexport default {\n    Query: {\n        player: async (parent, { position, gameId }, { models }) => {\n            const player = await models.Player.findOne({position: position, game: gameId});\n            if (!player) {\n                throw new UserInputError('Failed to find player. Incorrect position or game id.');\n            }\n            return player;\n        },\n        players: async (parent, args, { models }) => {\n            return models.Player.find({});\n        },\n    },\n\n    Mutation: {\n        createPlayer: async (\n            parent,\n            { stack, position, gameId },\n            { me, models },\n        ) => {\n            const game = await models.Game.findOne({_id: gameId});\n            if (!game) {\n                throw new UserInputError('Incorrect game id.');\n            }\n\n            const user = await models.User.findOne({_id: me.id})\n            if (!user) {\n                throw new UserInputError('Failed to find valid user.');\n            }\n\n            let admin = false;\n            if (game.numPlayers == 0) {\n                admin = true;\n            }\n\n            const player = new models.Player({\n                stack: stack,\n                position: position,\n                hand: null,\n                betAmount: -1,\n                standing: false,\n                requestStanding: false,\n                requestSitting: false,\n                admin: admin,\n\n                game: gameId,\n                user: me.id\n            });\n            if (!player) {\n                throw new UserInputError('Failed to create new player.');\n            }\n            game.numPlayers += 1;\n\n            user.player = player.id;\n            game.players.push(player);\n\n            try {\n                await user.save();\n                await game.save();\n                await player.save();\n            } catch(err) {\n                console.error(err);\n                throw new UserInputError('Failed to update models.');\n            }\n            \n            try {\n                await pubsub.publish(EVENTS.PLAYER.CREATED, {\n                    change: game,\n                });\n            } catch(err) {\n                console.error(err);\n                throw new UserInputError('Failed to publish game.');\n            }\n            \n            return true;\n        },\n\n        updateStack: async (\n            parent,\n            { position, stack, gameId },\n            { models },\n        ) => {\n            const player = await models.Player.findOne({position: position, game: gameId});\n            if (!game) {\n                throw new UserInputError('Incorrect game id or position.');\n            }\n\n            player.stack = stack;\n\n            try {\n                await player.save();\n            } catch(err) {\n                console.error(err);\n                throw new UserInputError('Failed to update models.');\n            }\n\n            return true;\n        },\n\n        removePlayer: async (\n            parent,\n            { position, gameId },\n            { models },\n        ) => {\n            return await removePlayer(position, gameId, models);\n        },\n\n        player: async (parent, { position, gameId }, { models }) => {\n            const player = await models.Player.findOne({position: position, game: gameId});\n            if (!player) {\n                throw new UserInputError('Failed to find player. Incorrect position or game id.');\n            }\n            return player;\n        },\n\n        sit: async (\n            parent,\n            { gameId },\n            { me, models},\n        ) => {\n            const user = await models.User.findOne({_id: me.id})\n            if (!user) {\n                throw new UserInputError('Failed to find valid user.');\n            }\n\n            const player = await models.Player.findOne({_id: user.player, game: gameId});\n            if (!user) {\n                throw new UserInputError('Failed to find valid player. Incorrect game id.');\n            }\n\n            player.requestSitting = true;\n\n            try {\n                await player.save();\n            } catch(err) {\n                console.error(err);\n                throw new UserInputError('Failed to update models.');\n            }\n\n            return true;\n        },\n\n        stand: async (\n            parent,\n            { gameId },\n            { me, models},\n        ) => {\n            const user = await models.User.findOne({_id: me.id})\n            if (!user) {\n                throw new UserInputError('Failed to find valid user.');\n            }\n\n            const player = await models.Player.findOne({_id: user.player, game: gameId});\n            if (!user) {\n                throw new UserInputError('Failed to find valid player. Incorrect game id.');\n            }\n\n            try {\n                await player.save();\n            } catch(err) {\n                console.error(err);\n                throw new UserInputError('Failed to update models.');\n            }\n\n            return true;\n        },\n    },\n\n    Player: {\n        user: async (player, args, { models }) => {\n            const user = await models.User.findOne({\n                player: player.id,\n            });\n\n            if (!user) {\n                throw new ServerError('Failed to find valid user by player id.');\n            }\n\n            return user;\n        },\n        game: async (player, args, { models }) => {\n            const game = await models.Game.findOne({\n                player: player.id,\n            });\n\n            if (!game) {\n                throw new ServerError('Failed to find valid game by player id.');\n            }\n\n            return game;\n        },\n    },\n};"],"file":"player.js"}