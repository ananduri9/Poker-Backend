{"version":3,"sources":["../../src/resolvers/game.js"],"names":["Query","game","parent","id","models","Game","findOne","_id","UserInputError","getData","gameId","pubsub","publish","EVENTS","PLAYER","CREATED","change","console","error","Mutation","createGame","sBlind","bBlind","potSize","smallBlind","bigBlind","dealer","numPlayers","table","prevPotSize","state","save","joinGame","startGame","me","User","user","Player","player","standing","position","bet","amount","stack","betAmount","curBet","allIn","isAllIn","handleAllIn","fold","isFolded","Subscription","subscribe","asyncIterator","payload","variables","players","args","find"],"mappings":"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","sourcesContent":["\nimport { withFilter } from 'apollo-server';\nimport { UserInputError } from 'apollo-server-express';\n\nimport pubsub, { EVENTS } from '../subscription';\nimport { startNewHand, findNext } from '../helpers/pokerLifeCycle';\n\nexport default {\n    Query: {\n        game: async (parent, { id }, { models }) => {\n            const game = models.Game.findOne({ _id: id });\n            if (!game) {\n                throw new UserInputError('Incorrect game id.');\n            }\n            return game;\n        },\n\n        getData: async(\n            parent,\n            { gameId },\n            { models },\n        ) => {\n            const game = await models.Game.findOne({ _id: gameId });\n            if (!game) {\n                throw new UserInputError('Incorrect game id.');\n            }\n\n            try {\n                await pubsub.publish(EVENTS.PLAYER.CREATED, {\n                    change: game,\n                });\n            } catch (err) {\n                console.error(err);\n                throw new UserInputError('Failed to publish game.');\n            }\n\n            return true;\n        },\n    },\n\n    Mutation: {\n        createGame: async (\n            parent,\n            { sBlind, bBlind },\n            { models },\n        ) => {\n            const game = new models.Game({\n                potSize: 0,\n                smallBlind: sBlind,\n                bigBlind: bBlind,\n                dealer: 0,\n                numPlayers: 0,\n                table: [],\n                prevPotSize: 0,\n                state: \"notStarted\",\n            });\n            if (!game) {\n                throw new UserInputError('Failed to create new game.');\n            }\n\n            try {\n                await game.save();\n            } catch (err) {\n                console.error(err);\n                throw new UserInputError('Failed to update models.');\n            }\n\n            try {\n                await pubsub.publish(EVENTS.PLAYER.CREATED, {\n                    change: game,\n                });\n            } catch (err) {\n                console.error(err);\n                throw new UserInputError('Failed to publish game.');\n            }\n\n            return game.id;\n        },\n\n        joinGame: async (\n            parent,\n            { gameId },\n            { models },\n        ) => {\n            const game = await models.Game.findOne({ _id: gameId });\n            if (!game) {\n                throw new UserInputError('Incorrect game id.');\n            }\n\n           try {\n                await pubsub.publish(EVENTS.PLAYER.CREATED, {\n                    change: game,\n                });\n            } catch (err) {\n                console.error(err);\n                throw new UserInputError('Failed to publish game.');\n            }\n\n            return true;\n        },\n\n        startGame: async (\n            parent,\n            { gameId },\n            { me, models },\n        ) => {\n            const game = await models.Game.findOne({ _id: gameId });\n            if (!game) {\n                throw new UserInputError('Incorrect game id.');\n            }\n\n            const user = await models.User.findOne({ _id: me.id })\n            if (!user) {\n                throw new UserInputError('Failed to find valid user.');\n            }\n            const player = await models.Player.findOne({ _id: user.player, game: gameId, standing: false });\n            if (!user) {\n                throw new UserInputError('Failed to find valid player.');\n            }\n\n            game.dealer = player.position;\n\n            try {\n                await game.save();\n            } catch (err) {\n                console.error(err);\n                throw new UserInputError('Failed to update models.');\n            }\n\n            await startNewHand(gameId, models);\n            return true;\n        },\n\n        bet: async (\n            parent,\n            { position, amount, gameId },\n            { me, models },\n        ) => {\n            const user = await models.User.findOne({_id: me.id})\n            if (!user) {\n                throw new UserInputError('Failed to find valid user.');\n            }\n            const player = await models.Player.findOne({_id: user.player, game: gameId});\n            if (!player) {\n                throw new UserInputError('Failed to find player user.');\n            }\n            \n            // const player = await models.Player.findOne({ position: position, game: gameId });\n            const game = await models.Game.findOne({ _id: gameId });\n            if (!game) {\n                throw new UserInputError('Incorrect game id.');\n            }\n\n            player.stack -= amount;\n            if (player.betAmount == -1) {\n                player.betAmount = amount;\n            } else {\n                player.betAmount += amount;\n            }\n\n            game.potSize += amount;\n            game.curBet = player.betAmount;\n\n            try {\n                await player.save();\n                await game.save();\n            } catch (err) {\n                console.error(err);\n                throw new UserInputError('Failed to update models.');\n            }\n\n            findNext(models, player.position, gameId, \"bet\");\n            return true;\n        },\n\n        allIn: async (\n            parent,\n            { position, gameId },\n            { me, models },\n        ) => {\n            const user = await models.User.findOne({_id: me.id})\n            if (!user) {\n                throw new UserInputError('Failed to find valid user.');\n            }\n            const player = await models.Player.findOne({_id: user.player, game: gameId});\n            if (!player) {\n                throw new UserInputError('Failed to find player user.');\n            }\n\n            // const player = await models.Player.findOne({ position: position, game: gameId });\n            const game = await models.Game.findOne({ _id: gameId });\n            if (!game) {\n                throw new UserInputError('Incorrect game id.');\n            }\n\n            player.isAllIn = true;\n            player.stack = 0;\n            if (player.betAmount == -1) {\n                player.betAmount = player.stack;\n            } else {\n                player.betAmount += player.stack;\n            }\n            \n            game.curBet = player.betAmount;\n            game.potSize += player.stack;\n            game.handleAllIn = true;\n\n            \n            try {\n                await player.save();\n                await game.save();\n            } catch (err) {\n                console.error(err);\n                throw new UserInputError('Failed to update models.');\n            }\n            \n            findNext(models, player.position, gameId, \"allIn\");\n            return true;\n        },\n\n        fold: async (\n            parent,\n            { position, gameId },\n            { me, models },\n        ) => {\n            const user = await models.User.findOne({_id: me.id})\n            if (!user) {\n                throw new UserInputError('Failed to find valid user.');\n            }\n            const player = await models.Player.findOne({_id: user.player, game: gameId});\n            if (!player) {\n                throw new UserInputError('Failed to find player user.');\n            }\n\n            // const player = await models.Player.findOne({ position: position, game: gameId });\n            player.isFolded = true;\n\n            await player.save();\n\n            try {\n                await player.save();\n            } catch (err) {\n                console.error(err);\n                throw new UserInputError('Failed to update models.');\n            }\n\n            findNext(models, player.position, gameId, \"fold\");\n            return true;\n        },\n\n    },\n\n    Subscription: {\n        change: {\n            subscribe: withFilter(\n                () => pubsub.asyncIterator(EVENTS.PLAYER.CREATED),\n                (payload, variables) => {\n                    return variables.gameId === payload.change.id\n                }\n            )\n        },\n    },\n\n    Game: {\n        players: async (game, args, { models }) => {\n            const player = await models.Player.find({\n                game: game.id,\n                standing: false,\n            });\n            if (!player) {\n                throw new UserInputError('Failed to find player user.');\n            }\n\n            return player;\n        },\n    },\n};"],"file":"game.js"}