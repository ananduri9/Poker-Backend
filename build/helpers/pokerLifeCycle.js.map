{"version":3,"sources":["../../src/helpers/pokerLifeCycle.js"],"names":["getAction","players","curPos","numNext","livePlayers","filter","player","isFolded","isAllIn","getPosition","nextIndex","getIndex","position","curIndex","map","indexOf","length","handleAllIns","gameId","models","Game","findOne","_id","game","UserInputError","Player","find","standing","sort","playersAlive","handleAllIn","playersAllIn","a","b","stack","len","betAmount","potSize","numRegular","forEach","allIn","showCards","hand","prevBetAmount","index","sidePotSize","prevPotSize","sidePot","push","size","positions","slice","Promise","all","save","console","error","isBigBlindDuringPreflop","state","dealer","curBet","bigBlind","findNext","startPos","act","alive","i","aliveIndex","action","pubsub","publish","EVENTS","PLAYER","CREATED","change","wins","startNewHand","showDownplayers","showDownpositions","log","showdown","gotoNextRound","GameStateError","$in","tableCards","table","card","number","suit","playerHands","card1","card2","solvedHands","Hand","solve","winningCards","winners","numWinners","cards","cardPool","value","winner","JSON","stringify","winnerHand","substr","Math","floor","requestStanding","requestSitting","execState","updateOne","deck","Deck","shuffle","pop","bb","sb","smallBlind"],"mappings":"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","sourcesContent":["import { Hand } from 'pokersolver';\nimport { UserInputError } from 'apollo-server-express';\n\nimport pubsub, { EVENTS } from '../subscription';\nimport Deck from '../deck';\nimport { removePlayer } from './functions';\n\nconst getAction = (players, curPos, numNext) => {\n    const livePlayers = players.filter(player => {\n        return (!player.isFolded && !player.isAllIn);\n    });\n\n    return getPosition(livePlayers, curPos, numNext);\n}\n\nconst getPosition = (players, curPos, numNext) => {\n    const nextIndex = getIndex(players, curPos, numNext)\n    return players[nextIndex].position;\n}\n\nconst getIndex = (players, curPos, numNext) => {\n    const curIndex = players.map(player => player.position).indexOf(curPos);\n    return (curIndex + numNext) % players.length;\n}\n\nconst handleAllIns = async (gameId, models) => {\n    const game = await models.Game.findOne({ _id: gameId });\n    if (!game) {\n        throw new UserInputError('Incorrect game id.');\n    }\n    const players = await models.Player.find({ game: gameId, standing: false }).sort({ position: 1 });\n    if (!players) {\n        throw new UserInputError('Failed to find players. Incorrect game id.');\n    }\n\n    const playersAlive = players.filter(player => (!player.isFolded && !players.handleAllIn));\n    const playersAllIn = playersAlive.filter(player => (player.isAllIn && !players.handleAllIn));\n\n    playersAlive.sort((a, b) => a.stack - b.stack); // Sort alive playersin ascending order of stack size\n    const len = playersAlive.length;\n\n    if (playersAlive.length == playersAllIn.length) {\n        // Person with biggest stack is all in no more\n        playersAlive[len - 1].isAllIn = false;\n        playersAlive[len - 1].stack = playersAlive[len - 1].betAmount - playersAlive[len - 2].betAmount;\n        playersAlive[len - 1].betAmount = playersAlive[len - 1].betAmount - playersAlive[len - 1].stack;\n        game.potSize -= playersAlive[len - 1].stack;\n    }\n\n    let numRegular = 0;\n    playersAlive.forEach(player => {\n        if (!player.isAllIn) {\n            numRegular += 1;\n        } else {\n            player.handleAllIn = true;\n        }\n    });\n\n    if (numRegular == 1) {\n        game.allIn = true; // Proceed all the way to show down and show cards\n        playersAlive.forEach(player => {\n            player.showCards = player.hand;\n        })\n    }\n\n    let prevBetAmount = 0;\n    // Create side pots and push onto game stack\n    playersAlive.forEach((player, index) => {\n        if (player.isAllIn) {\n            let sidePotSize = (player.betAmount - prevBetAmount) * (len - index ) + game.prevPotSize;\n            game.sidePot.push({\n                size: sidePotSize,\n                positions: playersAlive.slice(index).map(player => player.position),\n            });\n            game.potSize -= sidePotSize;\n            prevBetAmount = player.betAmount;\n            game.prevPotSize = 0;\n        }\n    });\n\n    await Promise.all(playersAlive.map(async (player) => {\n        try {\n            await player.save();\n        } catch (err) {\n            console.error(err);\n            throw new UserInputError('Failed to update models.');\n        }\n    }));\n\n    game.handleAllIn = false;\n    try {\n        await game.save();\n    } catch (err) {\n        console.error(err);\n        throw new UserInputError('Failed to update models.');\n    }\n\n    return true;\n\n}\n\nconst isBigBlindDuringPreflop = (game, players, index) => {\n   return (game.state == \"newRound\" && \n           index == getIndex(players, game.dealer, 2) && \n           game.curBet == game.bigBlind)\n}\n\nconst findNext = async (models, startPos, gameId, act) => {\n    const game = await models.Game.findOne({ _id: gameId });\n    if (!game) {\n        throw new UserInputError('Incorrect game id.');\n    }\n    const players = await models.Player.find({ game: gameId, standing: false }).sort({ position: 1 });\n    if (!players) {\n        throw new UserInputError('Failed to find players. Incorrect game id.');\n    }\n\n    let alive = 0;\n    let aliveIndex;\n    // Check if there is another person to act in this round\n    for (let i = 1; i < players.length; i++) {\n        const index = getIndex(players, startPos, i);\n\n        if (!players[index].isFolded) {\n            alive += 1; // Keep track of number not folded\n\n            if (!players[index].isAllIn) {\n                aliveIndex = index; // Keep track of last person alive\n\n                if ((players[index].betAmount != game.curBet) || isBigBlindDuringPreflop(game, players, index)) {\n                    game.action = players[index].position; // Set action to next player to act\n                    try {\n                        await game.save();\n                    } catch (err) {\n                        console.error(err);\n                        throw new UserInputError('Failed to update models.');\n                    }\n\n                    try {\n                        await pubsub.publish(EVENTS.PLAYER.CREATED, {\n                            change: game,\n                        });\n                    } catch (err) {\n                        console.error(err);\n                        throw new UserInputError('Failed to publish game.');\n                    }\n\n                    return true;\n                }\n            }\n        }\n    }\n\n    // If everyone else is folded, this person wins\n    if (act == \"fold\" && alive == 1) {\n        await wins(game.potSize, players[aliveIndex].position, gameId, models, 1);\n\n        try {\n            await pubsub.publish(EVENTS.PLAYER.CREATED, {\n                change: game,\n            });\n        } catch (err) {\n            console.error(err);\n            throw new UserInputError('Failed to publish game.');\n        }\n\n        await startNewHand(gameId, models);\n        return true;\n    }\n\n    if (alive > 0) {\n        // Handle any all ins called in this round\n        if (game.handleAllIn) {\n            await handleAllIns(gameId, models);\n\n            await pubsub.publish(EVENTS.PLAYER.CREATED, {\n                change: game,\n            });\n        }\n\n        // Handle showdowns at river\n        if (game.state === \"river\") {\n            const showDownplayers = players.filter(player => {\n                return ((!player.isAllIn && !player.isFolded && player.betAmount == game.curBet));\n            });\n            const showDownpositions = showDownplayers.map(player => player.position);\n\n            // Handle all in side pots\n            for (const sidePot of game.sidePot) {\n                console.log('sidepot');\n                console.log(sidePot);\n                let { size, positions } = sidePot;\n                await showdown(size, positions, gameId, models);\n                console.log(game.potSize);\n            }\n\n            // Handle normal showdown between >= 2 players\n            console.log(showDownpositions);\n            if (showDownplayers.length > 1) {\n                await showdown(game.potSize, showDownpositions, gameId, models);\n            }\n\n            try {\n                await pubsub.publish(EVENTS.PLAYER.CREATED, {\n                    change: game,\n                });\n            } catch (err) {\n                console.error(err);\n                throw new UserInputError('Failed to publish game.');\n            }\n\n            // Start new hand from beginning\n            await startNewHand(gameId, models);\n            return true;\n        }\n\n        // Else if not river, go to next round\n        await gotoNextRound(gameId, models);\n        return true;\n    }\n\n    // Should not reach here\n    throw new GameStateError('Error, there are no live players!');\n};\n\nconst showdown = async (potSize, positions, gameId, models) => {\n    const game = await models.Game.findOne({ _id: gameId });\n    if (!game) {\n        throw new UserInputError('Incorrect game id.');\n    }\n    const players = await models.Player.find({\n        position: { $in: positions },\n        standing: false,\n        game: gameId\n    }).sort({ position: 1 });\n    if (!players) {\n        throw new UserInputError('Failed to find players. Incorrect game id.');\n    }\n\n    const tableCards = game.table.map(card => {\n        return card.number + card.suit;\n    });\n    console.log(tableCards);\n    console.log(players);\n\n    const playerHands = players.map(player => {\n        console.log(player.hand);\n        const card1 = player.hand.card1.number + player.hand.card1.suit;\n        const card2 = player.hand.card2.number + player.hand.card2.suit;\n        return [card1, card2, ...tableCards];\n    });\n\n    players.forEach((player, index) => {\n        player.hand = playerHands[index];\n    });\n\n    const solvedHands = playerHands.map(hand => Hand.solve(hand));\n    const winningCards = Hand.winners(solvedHands)\n    const numWinners = winningCards.length;\n\n    await Promise.all(winningCards.map(async (cards) => {\n        const winners = cards.cardPool.map(card => card.value + card.suit)\n        const winner = players.find(player => {\n            return JSON.stringify(player.hand.sort()) === JSON.stringify(winners.sort());\n        });\n\n        console.log('alo');\n        console.log(winner.hand)\n        const winnerHand = winner.hand.slice(0,2);\n        winner.showCards = { \n            card1: {\n                number: winnerHand[0].substr(0,1),\n                suit: winnerHand[0].substr(1,1),\n            },\n            card2: {\n                number: winnerHand[1].substr(0,1),\n                suit: winnerHand[1].substr(1,1),\n            },\n        }\n        try {\n            await winner.save();\n        } catch (err) {\n            console.error(err);\n            throw new UserInputError('Failed to update models.');\n        }\n\n        await wins(potSize, winner.position, gameId, models, numWinners);\n    }));\n\n    return true;\n}\n\nconst wins = async (potSize, position, gameId, models, numWinners) => {\n    const player = await models.Player.findOne({ position: position, game: gameId });\n    if (!player) {\n        throw new UserInputError('Failed to find player. Invalid position.');\n    }\n\n    player.stack += Math.floor(potSize / numWinners);\n\n    try {\n        await player.save();\n    } catch (err) {\n        console.error(err);\n        throw new UserInputError('Failed to update models.');\n    }\n    return true;\n}\n\nconst startNewHand = async (gameId, models) => {\n    const players = await models.Player.find({ game: gameId }).sort({ position: 1 });\n    if (!players) {\n        throw new UserInputError('Failed to find players. Incorrect game id.');\n    }\n    const game = await models.Game.findOne({ _id: gameId });\n    if (!game) {\n        throw new UserInputError('Incorrect game id.');\n    }\n\n    // Remove player if stack went to 0\n    for (const player of players) {\n        if (player.stack <= 0) {\n            await removePlayer(player.position, gameId, models);\n        }\n    }\n\n    await Promise.all(players.map(async (player) => {\n        if (player.requestStanding) {\n            player.standing = true;\n        }\n        if (player.requestSitting) {\n            player.standing = false;\n        }\n        player.isFolded = false;\n        player.isAllIn = false;\n        player.handleAllIn = false;\n        player.hand = null;\n        player.showCards = null;\n        await player.save();\n    }));\n\n    game.potSize = 0;\n    game.sidePot = [];\n    game.allIn = false;\n    game.handleAllIn = false;\n    game.dealer = getPosition(players, game.dealer, 1);\n    game.table = [];\n    game.state = \"newRound\";\n    game.curBet = -1;\n    game.prevPotSize = 0;\n\n    try {\n        await game.save();\n    } catch (err) {\n        console.error(err);\n        throw new UserInputError('Failed to update models.');\n    }\n\n    try {\n        await pubsub.publish(EVENTS.PLAYER.CREATED, {\n            change: game,\n        });\n    } catch (err) {\n        console.error(err);\n        throw new UserInputError('Failed to publish game.');\n    }\n\n    await execState(\"preflop\", gameId, models);\n    return true;\n}\n\nconst gotoNextRound = async (gameId, models) => {\n    const game = await models.Game.findOne({ _id: gameId });\n    if (!game) {\n        throw new UserInputError('Incorrect game id.');\n    }\n\n    switch (game.state) {\n        case \"preflop\":\n            await models.Game.updateOne(\n                { _id: gameId },\n                {\n                    state: \"flop\",\n                }\n            );\n            await execState(\"flop\", gameId, models);\n            break;\n        case \"flop\":\n            await models.Game.updateOne(\n                { _id: gameId },\n                {\n                    state: \"turn\",\n                }\n            );\n            await execState(\"turn\", gameId, models);\n            break;\n        case \"turn\":\n            await models.Game.updateOne(\n                { _id: gameId },\n                {\n                    state: \"river\",\n                }\n            );\n            await execState(\"river\", gameId, models);\n            break;\n        case \"river\":\n            await models.Game.updateOne(\n                { _id: gameId },\n                {\n                    state: \"preflop\",\n                }\n            );\n            await execState(\"preflop\", gameId, models);\n            break;\n        default:\n            throw new GameStateError('Game state is of invalid state');\n    }\n    return true;\n}\n\nconst execState = async (state, gameId, models) => {\n    const players = await models.Player.find({ game: gameId, standing: false }).sort({ position: 1 });\n    if (!players) {\n        throw new UserInputError('Failed to find players. Incorrect game id.');\n    }\n    const game = await models.Game.findOne({ _id: gameId });\n    if (!game) {\n        throw new UserInputError('Incorrect game id.');\n    }\n\n    const dealer = game.dealer;  \n\n    switch (state) {\n        case \"preflop\":\n            game.deck = (new Deck).shuffle();\n\n            await Promise.all(players.map(async (player) => {\n                player.betAmount = -1;\n                const card1 = game.deck.pop();\n                const card2 = game.deck.pop();\n                player.hand = { card1: card1, card2: card2 };\n                try {\n                    await player.save();\n                } catch (err) {\n                    console.error(err);\n                    throw new UserInputError('Failed to update models.');\n                }\n            }));\n\n            const bb = players[getIndex(players, dealer, 2)];\n            const sb = players[getIndex(players, dealer, 1)];\n\n            bb.stack -= game.bigBlind;\n            bb.betAmount = game.bigBlind;\n            sb.stack -= game.smallBlind;\n            sb.betAmount = game.smallBlind;\n            await bb.save();\n            await sb.save();\n\n            game.potSize += game.bigBlind + game.smallBlind;\n            game.action = getAction(players, dealer, 3);\n            game.curBet = game.bigBlind;\n            game.state = \"preflop\";\n            try {\n                await game.save();\n            } catch (err) {\n                console.error(err);\n                throw new UserInputError('Failed to update models.');\n            }\n\n            try {\n                await pubsub.publish(EVENTS.PLAYER.CREATED, {\n                    change: game,\n                });\n            } catch (err) {\n                console.error(err);\n                throw new UserInputError('Failed to publish game.');\n            }\n\n            break;\n        case \"flop\":\n            game.table.push(game.deck.pop());\n            game.table.push(game.deck.pop());\n            game.table.push(game.deck.pop());\n\n            await Promise.all(players.map(async (player) => {\n                player.betAmount = -1;\n                try {\n                    await player.save();\n                } catch (err) {\n                    console.error(err);\n                    throw new UserInputError('Failed to update models.');\n                }\n            }));\n\n            game.action = getAction(players, dealer, 1);\n            game.prevPotSize = game.potSize;\n            game.curBet = -1;\n            try {\n                await game.save();\n            } catch (err) {\n                console.error(err);\n                throw new UserInputError('Failed to update models.');\n            }\n\n            try {\n                await pubsub.publish(EVENTS.PLAYER.CREATED, {\n                    change: game,\n                });\n            } catch (err) {\n                console.error(err);\n                throw new UserInputError('Failed to publish game.');\n            }\n\n            if (game.allIn) {\n                gotoNextRound(gameId, models);\n            }\n\n            break;\n        case \"turn\":\n            game.table.push(game.deck.pop());\n\n            await Promise.all(players.map(async (player) => {\n                player.betAmount = -1;\n                try {\n                    await player.save();\n                } catch (err) {\n                    console.error(err);\n                    throw new UserInputError('Failed to update models.');\n                }\n            }));\n\n            game.action = getAction(players, dealer, 1);\n            game.prevPotSize = game.potSize;\n            game.curBet = -1;\n            try {\n                await game.save();\n            } catch (err) {\n                console.error(err);\n                throw new UserInputError('Failed to update models.');\n            }\n\n            try {\n                await pubsub.publish(EVENTS.PLAYER.CREATED, {\n                    change: game,\n                });\n            } catch (err) {\n                console.error(err);\n                throw new UserInputError('Failed to publish game.');\n            }\n\n            if (game.allIn) {\n                gotoNextRound(gameId, models);\n            }\n\n            break;\n        case \"river\":\n            game.table.push(game.deck.pop());\n\n            await Promise.all(players.map(async (player) => {\n                player.betAmount = -1;\n                try {\n                    await player.save();\n                } catch (err) {\n                    console.error(err);\n                    throw new UserInputError('Failed to update models.');\n                }\n            }));\n\n            game.action = getAction(players, dealer, 1);\n            game.prevPotSize = game.potSize;\n            game.curBet = -1;\n            try {\n                await game.save();\n            } catch (err) {\n                console.error(err);\n                throw new UserInputError('Failed to update models.');\n            }\n\n            try {\n                await pubsub.publish(EVENTS.PLAYER.CREATED, {\n                    change: game,\n                });\n            } catch (err) {\n                console.error(err);\n                throw new UserInputError('Failed to publish game.');\n            }\n\n            if (game.allIn) {\n                findNext(models, game.dealer, gameId, \"allIn\"); //this should be refactored\n            }\n\n            break;\n        default:\n            throw new GameStateError('Game state is of invalid state');\n    }\n    return true;\n}\n\nexport { startNewHand, findNext };"],"file":"pokerLifeCycle.js"}